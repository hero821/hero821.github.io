<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CoreDNS使用etcd插件</title>
    <url>/2021/07/24/CoreDNS%E4%BD%BF%E7%94%A8etcd%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="配置etcd"><a href="#配置etcd" class="headerlink" title="配置etcd"></a>配置etcd</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name etcd \</span><br><span class="line">-p 2379:2379 \</span><br><span class="line">-p 2380:2380 \</span><br><span class="line">--env ALLOW_NONE_AUTHENTICATION=yes \</span><br><span class="line">bitnami/etcd:3.4.16-debian-10-r28</span><br><span class="line"></span><br><span class="line">docker run -it --rm \</span><br><span class="line">--env ALLOW_NONE_AUTHENTICATION=yes \</span><br><span class="line">bitnami/etcd:3.4.16-debian-10-r28 \</span><br><span class="line">etcdctl --endpoints http://172.17.0.1:2379 put /key1 value1</span><br><span class="line"></span><br><span class="line">docker run -it --rm \</span><br><span class="line">--env ALLOW_NONE_AUTHENTICATION=yes \</span><br><span class="line">bitnami/etcd:3.4.16-debian-10-r28 \</span><br><span class="line">etcdctl --endpoints http://172.17.0.1:2379 get / --prefix</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="配置CoreDNS"><a href="#配置CoreDNS" class="headerlink" title="配置CoreDNS"></a>配置CoreDNS</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi Corefile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">. &#123;</span><br><span class="line">  etcd &#123;</span><br><span class="line">    fallthrough</span><br><span class="line">    path /skydns</span><br><span class="line">    endpoint http://172.17.0.1:2379</span><br><span class="line">  &#125;</span><br><span class="line">  forward . /etc/resolv.conf</span><br><span class="line">  log</span><br><span class="line">  errors</span><br><span class="line">  loadbalance</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">docker run -d --name coredns \</span><br><span class="line">-p 53:53/udp \</span><br><span class="line">-v $PWD/Corefile:/Corefile \</span><br><span class="line">coredns/coredns:1.8.4</span><br></pre></td></tr></table></figure>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y bind-utils</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询到：example.org. 3600 IN A 93.184.216.34</span></span><br><span class="line">dig example.org @172.17.0.1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过etcdctl添加A记录</span></span><br><span class="line">docker run -it --rm \</span><br><span class="line">--env ALLOW_NONE_AUTHENTICATION=yes \</span><br><span class="line">bitnami/etcd:3.4.16-debian-10-r28 \</span><br><span class="line">etcdctl --endpoints http://172.17.0.1:2379 put /skydns/org/example &#x27;&#123;&quot;host&quot;:&quot;10.0.0.1&quot;,&quot;ttl&quot;:60&#125;&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询到：example.org. 3600 IN A 10.0.0.1</span></span><br><span class="line">dig example.org @172.17.0.1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过curl添加A记录</span></span><br><span class="line">curl -X POST http://172.17.0.1:2379/v3/kv/put \</span><br><span class="line">-d &quot;&#123;\&quot;key\&quot;: \&quot;$(echo -n &#x27;/skydns/org/example&#x27; | base64)\&quot;, \&quot;value\&quot;: \&quot;$(echo -n &#x27;&#123;&quot;host&quot;:&quot;10.0.0.2&quot;,&quot;ttl&quot;:60&#125;&#x27; | base64)\&quot;&#125;&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询到：example.org. 3600 IN A 10.0.0.2</span></span><br><span class="line">dig example.org @172.17.0.1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加多个A记录，实现负载均衡</span></span><br><span class="line">docker run -it --rm \</span><br><span class="line">--env ALLOW_NONE_AUTHENTICATION=yes \</span><br><span class="line">bitnami/etcd:3.4.16-debian-10-r28 \</span><br><span class="line">etcdctl --endpoints http://172.17.0.1:2379 put /skydns/org/example/x1 &#x27;&#123;&quot;host&quot;:&quot;10.0.0.1&quot;,&quot;ttl&quot;:60&#125;&#x27;</span><br><span class="line">docker run -it --rm \</span><br><span class="line">--env ALLOW_NONE_AUTHENTICATION=yes \</span><br><span class="line">bitnami/etcd:3.4.16-debian-10-r28 \</span><br><span class="line">etcdctl --endpoints http://172.17.0.1:2379 put /skydns/org/example/x2 &#x27;&#123;&quot;host&quot;:&quot;10.0.0.1&quot;,&quot;ttl&quot;:60&#125;&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 多次查询，每次返回的IP地址顺序不一样</span></span><br><span class="line">dig +short example.org @172.17.0.1</span><br><span class="line">dig +short example.org @172.17.0.1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清理etcd</span></span><br><span class="line">docker run -it --rm \</span><br><span class="line">--env ALLOW_NONE_AUTHENTICATION=yes \</span><br><span class="line">bitnami/etcd:3.4.16-debian-10-r28 \</span><br><span class="line">etcdctl --endpoints http://172.17.0.1:2379 del / --prefix</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询到：example.org. 3600 IN A 93.184.216.34</span></span><br><span class="line">dig example.org @172.17.0.1</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/bitnami/bitnami-docker-etcd#how-to-use-this-image">https://github.com/bitnami/bitnami-docker-etcd#how-to-use-this-image</a></p>
<p><a href="https://github.com/coredns/coredns/tree/master/plugin/etcd">https://github.com/coredns/coredns/tree/master/plugin/etcd</a></p>
]]></content>
      <categories>
        <category>DNS</category>
      </categories>
      <tags>
        <tag>DNS</tag>
        <tag>CoreDNS</tag>
        <tag>etcd</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS相关概念</title>
    <url>/2021/07/24/DNS%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>DNS是 Domain Name System 的缩写，作用是根据域名查询IP地址</p>
<h1 id="查询方式"><a href="#查询方式" class="headerlink" title="查询方式"></a>查询方式</h1><h2 id="递归查询"><a href="#递归查询" class="headerlink" title="递归查询"></a>递归查询</h2><p>DNS服务器接收到客户机请求，必须使用一个准确的查询结果回复客户机。<br>如果DNS服务器本地没有存储查询DNS信息，那么该服务器会询问其他服务器，并将返回的查询结果提交给客户机。</p>
<h2 id="迭代查询"><a href="#迭代查询" class="headerlink" title="迭代查询"></a>迭代查询</h2><p>DNS服务器会向客户机提供其他能够解析查询请求的DNS服务器地址。<br>当客户机发送查询请求时，DNS服务器并不直接回复查询结果，而是告诉客户机另一台DNS服务器地址。<br>客户机再向这台DNS服务器提交请求，依次循环直到返回查询的结果为止。</p>
<span id="more"></span>

<h1 id="DNS记录类型"><a href="#DNS记录类型" class="headerlink" title="DNS记录类型"></a>DNS记录类型</h1><p>A：地址记录（Address），返回域名指向的IP地址。<br>NS：域名服务器记录（Name Server），返回保存下一级域名信息的服务器地址。该记录只能设置为域名，不能设置为IP地址。<br>MX：邮件记录（Mail eXchange），返回接收电子邮件的服务器地址。<br>CNAME：规范名称记录（Canonical Name），返回另一个域名，即当前查询的域名是另一个域名的跳转。<br>PTR：逆向查询记录（Pointer Record），只用于从IP地址查询域名。</p>
<h1 id="私有DNS选型"><a href="#私有DNS选型" class="headerlink" title="私有DNS选型"></a>私有DNS选型</h1><p>BIND<br>PowerDNS<br>Dnsmasq<br>CoreDNS</p>
<p>参考：<a href="https://en.wikipedia.org/wiki/Comparison_of_DNS_server_software">https://en.wikipedia.org/wiki/Comparison_of_DNS_server_software</a></p>
]]></content>
      <categories>
        <category>DNS</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx实现流量拷贝</title>
    <url>/2021/07/26/Nginx%E5%AE%9E%E7%8E%B0%E6%B5%81%E9%87%8F%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<h1 id="基于-Nginx-Mirror-模块"><a href="#基于-Nginx-Mirror-模块" class="headerlink" title="基于 Nginx Mirror 模块"></a>基于 Nginx Mirror 模块</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/nginx/conf.d/default.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">server &#123;</span><br><span class="line">  listen    8080;</span><br><span class="line">  server_name localhost;</span><br><span class="line">  location / &#123;</span><br><span class="line">    mirror /mirror;</span><br><span class="line">    proxy_pass http://192.168.0.2:30000;</span><br><span class="line">  &#125;</span><br><span class="line">  location /mirror &#123;</span><br><span class="line">    internal;</span><br><span class="line">    proxy_pass http://127.0.0.1:8888$request_uri;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动 fiddler 用于抓包，监听端口 8888</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 请求</span></span><br><span class="line">curl -L -X POST &#x27;http://localhost:8080/swagger-ui.html?param1=value1&#x27; \</span><br><span class="line">-H &#x27;Content-Type: application/json&#x27; \</span><br><span class="line">-d &#x27;&#123;</span><br><span class="line">  &quot;param2&quot;: &quot;value2&quot;</span><br><span class="line">&#125;&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在 fiddler 中，可以看到相关记录</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="基于-lua-脚本"><a href="#基于-lua-脚本" class="headerlink" title="基于 lua 脚本"></a>基于 lua 脚本</h1><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> TODO</span></span><br></pre></td></tr></table></figure>

<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> TODO</span></span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://nginx.org/en/docs/http/ngx_http_mirror_module.html">http://nginx.org/en/docs/http/ngx_http_mirror_module.html</a></p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>修改Proxifier配置文件存储路径</title>
    <url>/2020/10/01/%E4%BF%AE%E6%94%B9Proxifier%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<h1 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h1><p>今天使用Proxifier的时候，发现配置文件存储路径为：C:\Users\<User>\AppData\Roaming\Proxifier\Profiles。<br>这样就会存在一些风险，例如：重装系统的时候（格式化系统盘），如果没想起来备份，可能就再也找不到了。<br>风险既然发现，就要想办法规避。</p>
<span id="more"></span>

<h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ul>
<li>首先，查看Proxifier帮助文档（路径：D:\Program Files (x86)\Proxifier\Proxifier.chm），无果。</li>
<li>然后，Google查资料，无果。</li>
<li>然后，试了试在C:\Users\<User>\AppData\Roaming\Proxifier下面创建Profiles快捷方式，删除Profiles文件夹，结果启动Proxifier之后，竟然又自动生成了Profiles文件夹，失败。</li>
<li>最后，我想起来Linux有个ln命令，效果是我想要的，开始Google查询“windows 软连接”，找到了mklink命令。</li>
</ul>
<p>查看help：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">λ mklink</span><br><span class="line">创建符号链接。</span><br><span class="line"></span><br><span class="line">MKLINK [[/D] | [/H] | [/J]] Link Target</span><br><span class="line"></span><br><span class="line">        /D      创建目录符号链接。默认为文件</span><br><span class="line">                符号链接。</span><br><span class="line">        /H      创建硬链接而非符号链接。</span><br><span class="line">        /J      创建目录联接。</span><br><span class="line">        Link    指定新的符号链接名称。</span><br><span class="line">        Target  指定新链接引用的路径</span><br><span class="line">                (相对或绝对)。</span><br></pre></td></tr></table></figure>

<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>注：需要管理员权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">λ mklink /D C:\Users\&lt;User&gt;\AppData\Roaming\Proxifier\Profiles E:\Config\Proxifier\Profiles</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Proxy</category>
      </categories>
      <tags>
        <tag>Proxy</tag>
        <tag>Proxifier</tag>
      </tags>
  </entry>
  <entry>
    <title>使用kubespray安装K8S</title>
    <url>/2021/08/14/%E4%BD%BF%E7%94%A8kubespray%E5%AE%89%E8%A3%85K8S/</url>
    <content><![CDATA[<h1 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h1><p>k8s-01：4C+2G+10G<br>k8s-02：4C+2G+10G<br>k8s-03：4C+2G+10G</p>
<h1 id="预配置"><a href="#预配置" class="headerlink" title="预配置"></a>预配置</h1><p>关闭selinux</p>
<p>关闭firewalld</p>
<p>开启ip_forward</p>
<p>修改yum源</p>
<p>修改pip源</p>
<p>安装软件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install git python-pip -y</span><br></pre></td></tr></table></figure>

<p>免密登录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line"><span class="meta">#</span><span class="bash"> ssh-copy-id root@ip</span></span><br><span class="line">ssh-copy-id root@192.168.128.201</span><br><span class="line">ssh-copy-id root@192.168.128.202</span><br><span class="line">ssh-copy-id root@192.168.128.203</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载源码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/kubernetes-incubator/kubespray.git -b v2.14.2</span></span><br><span class="line">git clone https://ghproxy.com/https://github.com/kubernetes-incubator/kubespray.git -b v2.14.2</span><br><span class="line">cd kubespray</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加依赖</span></span><br><span class="line">vi requirements.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">ruamel.yaml.clib==0.2.2</span><br><span class="line">MarkupSafe==1.1.1</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝inventory</span></span><br><span class="line">cp -rfp inventory/sample inventory/mycluster</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置代理（需要socks服务端开启允许局域网访问）</span></span><br><span class="line">vi inventory/mycluster/group_vars/all/all.yml</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">http_proxy: &quot;http://192.168.128.1:1081&quot;</span><br><span class="line">https_proxy: &quot;http://192.168.128.1:1081&quot;</span><br><span class="line">download_validate_certs: False</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加需要的组件</span></span><br><span class="line">vi inventory/mycluster/group_vars/k8s-cluster/addons.yml</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 手动配置inventory部署</span></span><br><span class="line">vi inventory/mycluster/inventory.ini </span><br><span class="line">ansible-playbook -i inventory/mycluster/inventory.ini cluster.yml</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自动配置inventory部署</span></span><br><span class="line">yum -y install python3 python3-pip</span><br><span class="line">pip3 install -r contrib/inventory_builder/requirements.txt</span><br><span class="line">declare -a IPS=(192.168.128.201 192.168.128.202 192.168.128.203)</span><br><span class="line">CONFIG_FILE=inventory/mycluster/hosts.yml python3 contrib/inventory_builder/inventory.py $&#123;IPS[@]&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改主机名：node1 改为 k8s-01，node2 改为 k8s-02，node3 改为 k8s-03</span></span><br><span class="line">vi inventory/mycluster/hosts.yml</span><br><span class="line">ansible-playbook -i inventory/mycluster/hosts.yml cluster.yml</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 部署失败，重试</span></span><br><span class="line">ansible-playbook -i inventory/mycluster/hosts.yml cluster.yml --limit @cluster.retry</span><br><span class="line"><span class="meta">#</span><span class="bash"> 部署失败，重置</span></span><br><span class="line">ansible-playbook -i inventory/mycluster/hosts.yml reset.yml</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加节点（仅worker）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改inventory</span></span><br><span class="line">ansible-playbook -i inventory/mycluster/hosts.yml scale.yml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除节点（仅worker）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改inventory</span></span><br><span class="line">ansible-playbook -i inventory/mycluster/hosts.yml remove-node.yml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加和删除节点（包含master、worker、etcd）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改inventory</span></span><br><span class="line">ansible-playbook -i inventory/mycluster/hosts.yml cluster.yml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新集群（全量更新）</span></span><br><span class="line">ansible-playbook -i inventory/mycluster/hosts.yml cluster.yml -e kube_version=v1.24.4</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新集群（滚动更新，会先驱逐POD）</span></span><br><span class="line">ansible-playbook -i inventory/mycluster/hosts.yml upgrade-cluster.yml -e kube_version=v1.24.4</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
        <tag>kubespray</tag>
      </tags>
  </entry>
  <entry>
    <title>在Termux中安装Linux</title>
    <url>/2021/07/25/%E5%9C%A8Termux%E4%B8%AD%E5%AE%89%E8%A3%85Linux/</url>
    <content><![CDATA[<h1 id="涉及软件"><a href="#涉及软件" class="headerlink" title="涉及软件"></a>涉及软件</h1><ul>
<li>termux</li>
<li>anlinux 或者 andronix</li>
</ul>
<span id="more"></span>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol>
<li>google play store 中安装 termux 和 anlinux</li>
<li>打开 anlinux，选择 仪表盘 菜单</li>
<li>点击 选择 按钮，选中 CentOS，点击 确定 按钮</li>
<li>点击 复制 按钮，复制指令</li>
<li>点击 启动 按钮，打开 termux，粘贴指令，点击输入法键盘 回车 按钮</li>
<li>等待安装完成</li>
</ol>
<p>安装完成之后，当前目录会生产4个文件</p>
<ul>
<li>centos-binds</li>
<li>centos-fs</li>
<li>centos.sh</li>
<li>start-centos.sh</li>
</ul>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>关于 termux 的配置，可以参考 <a href="/2021/07/25/%E5%AE%89%E8%A3%85Termux/" title="这里">这里</a></p>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./start-centos.sh</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="安装-openresty"><a href="#安装-openresty" class="headerlink" title="安装 openresty"></a>安装 openresty</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 wget</span></span><br><span class="line">yum install wget</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置 yum 源</span></span><br><span class="line">cd /etc/yum.repos.d</span><br><span class="line">wget https://openresty.org/package/centos/openresty.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 openresty</span></span><br><span class="line">yum install openresty</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改端口为8080（手机权限问题，默认端口80无法启动）</span></span><br><span class="line">vi /usr/local/openresty/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 openresty</span></span><br><span class="line">openresty</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置 lua</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">server &#123;</span><br><span class="line">  listen       8082;</span><br><span class="line">  server_name  localhost;</span><br><span class="line">  location / &#123;</span><br><span class="line">    default_type text/html;</span><br><span class="line">    content_by_lua_block &#123;</span><br><span class="line">      ngx.say(&quot;&lt;p&gt;hello, world&lt;/p&gt;&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">openresty -s reload</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">curl http://127.0.0.1:8082</span><br></pre></td></tr></table></figure>

<h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><ol>
<li>打开 anlinux，选择 删除系统 菜单</li>
<li>点击 选择 按钮，选中 CentOS，点击 确定 按钮</li>
<li>点击 复制 按钮，复制指令</li>
<li>点击 启动 按钮，打开 termux，粘贴指令，点击输入法键盘 回车 按钮</li>
<li>等待卸载完成</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/EXALAB/AnLinux-App">https://github.com/EXALAB/AnLinux-App</a></p>
]]></content>
      <categories>
        <category>Termux</category>
      </categories>
      <tags>
        <tag>Termux</tag>
      </tags>
  </entry>
  <entry>
    <title>在Termux中安装mitmproxy</title>
    <url>/2021/07/26/%E5%9C%A8Termux%E4%B8%AD%E5%AE%89%E8%A3%85mitmproxy/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装 termux ，可以参考 <a href="/2021/07/25/%E5%AE%89%E8%A3%85Termux/" title="这里">这里</a></p>
<p>安装 mitmproxy</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pkg install libffi openssl python rust</span><br><span class="line">pip install mitmproxy</span><br><span class="line">mitmproxy --version</span><br></pre></td></tr></table></figure>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>测试 mitmproxy ，可以参考 <a href="/2021/07/24/%E5%AE%89%E8%A3%85mitmproxy/" title="这里">这里</a></p>
]]></content>
      <categories>
        <category>Termux</category>
      </categories>
      <tags>
        <tag>Termux</tag>
        <tag>mitmproxy</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux路由相关概念</title>
    <url>/2021/07/25/Linux%E8%B7%AF%E7%94%B1%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h1 id="路由规则-ip-rule"><a href="#路由规则-ip-rule" class="headerlink" title="路由规则 ip rule"></a>路由规则 ip rule</h1><p><strong>操作系统默认规则</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip rule list</span><br><span class="line">0:      from all lookup local </span><br><span class="line">32766:  from all lookup main </span><br><span class="line">32767:  from all lookup default </span><br></pre></td></tr></table></figure>

<p><strong>每列的含义</strong></p>
<ul>
<li>Priority: 路由规则优先级，根据数字从小到大依次进行匹配，从0到32767</li>
<li>Selector: 对IP数据包进行匹配的条件，如 from all 表示所有IP数据包</li>
<li>Action: 对IP数据包执行的动作，如 lookup local 表示需要查找local路由表进行处理</li>
</ul>
<span id="more"></span>

<p><strong>命令格式</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip rule help</span><br><span class="line">Usage: ip rule &#123; add | del &#125; SELECTOR ACTION</span><br><span class="line">       ip rule &#123; flush | save | restore &#125;</span><br><span class="line">       ip rule [ list [ SELECTOR ]]</span><br><span class="line">SELECTOR := [ not ] [ from PREFIX ] [ to PREFIX ] [ tos TOS ] [ fwmark FWMARK[/MASK] ]</span><br><span class="line">            [ iif STRING ] [ oif STRING ] [ pref NUMBER ] [ l3mdev ]</span><br><span class="line">            [ uidrange NUMBER-NUMBER ]</span><br><span class="line">ACTION := [ table TABLE_ID ]</span><br><span class="line">          [ nat ADDRESS ]</span><br><span class="line">          [ realms [SRCREALM/]DSTREALM ]</span><br><span class="line">          [ goto NUMBER ]</span><br><span class="line">          SUPPRESSOR</span><br><span class="line">SUPPRESSOR := [ suppress_prefixlength NUMBER ]</span><br><span class="line">              [ suppress_ifgroup DEVGROUP ]</span><br><span class="line">TABLE_ID := [ local | main | default | NUMBER ]</span><br></pre></td></tr></table></figure>

<p><strong>SELECTOR</strong></p>
<ul>
<li><p>from PREFIX：选择要匹配的源前缀</p>
</li>
<li><p>to PREFIX：选择要匹配的目的前缀</p>
</li>
<li><p>tos TOS：选择要匹配的TOS值</p>
</li>
<li><p>fwmark MARK：选择要匹配的标记值</p>
</li>
<li><p>iif NAME：选择要匹配的传入接口设备，例如：可以为转发的数据包和本地数据包创建单独的路由表</p>
</li>
<li><p>oif NAME：选择要匹配的传出接口设备，仅适用于来自绑定到设备的本地套接字的数据包</p>
</li>
<li></li>
</ul>
<p><strong>ACTION</strong></p>
<ul>
<li>table TABLEID：要查找的路由表标识符</li>
<li>nat ADDRESS：要转换的IP地址（用于源地址）</li>
</ul>
<h1 id="路由表-ip-route"><a href="#路由表-ip-route" class="headerlink" title="路由表 ip route"></a>路由表 ip route</h1><p><strong>操作系统中有256个路由表</strong></p>
<ul>
<li><p>编号255：是 local 路由表，处理本地IP和广播地址路由，local路由表只由kernel维护，不能更改和删除</p>
</li>
<li><p>编号254：是 main 路由表，处理所有非策略常规路由，不指定路由表名时默认使用的路由表，ip route 命令默认操作的就是这个路由表</p>
</li>
<li><p>编号253：是 default 路由表，所有其他路由表都没有匹配到的情况下，根据该表中的条目进行处理</p>
</li>
<li><p>编号1-252：是 用户可以自定义的 路由表</p>
</li>
<li><p>编号0：是 系统保留 路由表</p>
</li>
</ul>
<p><strong>操作系统内部使用数字编号来标识路由表，为了方便记忆，有时需要使用符号标识路由表，对应关系在 /etc/iproute2/rt_tables 中</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/iproute2/rt_tables </span><br><span class="line">255   local</span><br><span class="line">254   main</span><br><span class="line">253   default</span><br><span class="line">0     unspec</span><br></pre></td></tr></table></figure>

<p><strong>查询路由表</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip route list</span><br><span class="line">default via 192.168.128.2 dev ens33 proto static metric 100 </span><br><span class="line">192.168.128.0/24 dev ens33 proto kernel scope link src 192.168.128.200 metric 100  </span><br></pre></td></tr></table></figure>

<p><strong>每列的含义</strong></p>
<ul>
<li>PREFIX：目标地址前缀，可以是 default 代表所有地址 0.0.0.0/0，可以是 cidr</li>
<li>proto RTPROTO：路由协议标识符，可以是数字编号或符号标识，对应关系在 /etc/iproute2/rt_protos 中<ul>
<li>redirect：路由是由于ICMP重定向而安装的</li>
<li>kernel：路由是在自动配置期间由内核安装的</li>
<li>boot：路由是在启动过程中安装的</li>
<li>static：路由是管理员安装的，以覆盖动态路由</li>
<li>ra：路由是通过路由器发现协议安装的</li>
</ul>
</li>
<li>scope SCOPE：路由前缀所覆盖的目标地址范围，可以是数字编号或符号标识，对应关系在 /etc/iproute2/rt_scopes 中</li>
<li>metric METRIC：路由跳数，指该条路由记录的质量，一般情况下，如果有多条到达相同目的地的路由记录，路由器会采用metric值小的那条路由</li>
<li>via ADDRESS：下一跳路由器的地址</li>
<li>dev NAME：输出设备名称</li>
<li>src ADDRESS：发送数据包时首选的源地址</li>
</ul>
<h1 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h1><p>双网卡：10.0.0.2/24 和 172.16.0.2/24<br>使来自 192.168.1.0/24 的数据包走 10.0.0.1 网关<br>是来自 192.168.2.0/24 的数据包走 172.16.0.1 网关</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 定义路由表名称</span></span><br><span class="line">echo 100 t100 &gt;&gt; /etc/iproute2/rt_tables</span><br><span class="line">echo 200 t200 &gt;&gt; /etc/iproute2/rt_tables</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新增规则</span></span><br><span class="line">ip rule add from 192.168.1.0/24 table t100</span><br><span class="line">ip rule add from 192.168.2.0/24 table t200</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加路由</span></span><br><span class="line">ip route add default via 10.0.0.1 table t100</span><br><span class="line">ip route add default via 172.16.0.1 table t200</span><br><span class="line"><span class="meta">#</span><span class="bash"> 刷新路由表</span></span><br><span class="line">ip route flush cache</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>路由</tag>
      </tags>
  </entry>
  <entry>
    <title>安装CoreDNS</title>
    <url>/2021/07/24/%E5%AE%89%E8%A3%85CoreDNS/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/coredns/coredns/releases/download/v1.8.4/coredns_1.8.4_linux_amd64.tgz</span><br><span class="line">mkdir coredns_1.8.4_linux_amd64</span><br><span class="line">tar zxvf coredns_1.8.4_linux_amd64.tgz -C coredns_1.8.4_linux_amd64</span><br></pre></td></tr></table></figure>

<h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull coredns/coredns:1.8.4</span><br></pre></td></tr></table></figure>

<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/coredns/coredns -b v1.8.4</span><br><span class="line">cd coredns</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./coredns -plugins</span><br><span class="line">vi Corefile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">. &#123;</span><br><span class="line">  hosts &#123;</span><br><span class="line">    10.0.0.1 example.org</span><br><span class="line">    fallthrough</span><br><span class="line">  &#125;</span><br><span class="line">  forward . /etc/resolv.conf</span><br><span class="line">  cache</span><br><span class="line">  log</span><br><span class="line">  errors</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br></pre></td></tr></table></figure>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./coredns -dns.port=1053</span><br><span class="line">dig @localhost -p 1053 a example.org</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>DNS</category>
      </categories>
      <tags>
        <tag>DNS</tag>
        <tag>CoreDNS</tag>
      </tags>
  </entry>
  <entry>
    <title>升级jar包中单文件</title>
    <url>/2020/10/01/%E5%8D%87%E7%BA%A7jar%E5%8C%85%E4%B8%AD%E5%8D%95%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h1><p>开发springboot项目的时候，我们经常会以jar包的形式进行部署。这个时候，如果需要修改某一个文件，那么该怎么升级呢？</p>
<ul>
<li>本地重新打包，全包上传到服务器</li>
<li>只上传单文件到服务器，在服务器上把单文件合并到原来的jar包中</li>
</ul>
<p>显然，第一种方案在网速较慢的时候，是影响工作效率的。</p>
<span id="more"></span>

<h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>查看help：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[security@localhost jars]$ jar</span><br><span class="line">用法: jar &#123;ctxui&#125;[vfm0Me] [jar-file] [manifest-file] [entry-point] [-C dir] files ...</span><br><span class="line">选项包括: </span><br><span class="line">    -c  创建新的归档文件</span><br><span class="line">    -t  列出归档目录</span><br><span class="line">    -x  从档案中提取指定的 (或所有) 文件</span><br><span class="line">    -u  更新现有的归档文件</span><br><span class="line">    -v  在标准输出中生成详细输出</span><br><span class="line">    -f  指定归档文件名</span><br><span class="line">    -m  包含指定清单文件中的清单信息</span><br><span class="line">    -e  为捆绑到可执行 jar 文件的独立应用程序</span><br><span class="line">        指定应用程序入口点</span><br><span class="line">    -0  仅存储; 不使用情况任何 ZIP 压缩</span><br><span class="line">    -M  不创建条目的清单文件</span><br><span class="line">    -i  为指定的 jar 文件生成索引信息</span><br><span class="line">    -C  更改为指定的目录并包含其中的文件</span><br><span class="line">如果有任何目录文件, 则对其进行递归处理。</span><br><span class="line">清单文件名, 归档文件名和入口点名称的指定顺序</span><br><span class="line">与 &#x27;m&#x27;, &#x27;f&#x27; 和 &#x27;e&#x27; 标记的指定顺序相同。</span><br><span class="line"></span><br><span class="line">示例 1: 将两个类文件归档到一个名为 classes.jar 的归档文件中: </span><br><span class="line">       jar cvf classes.jar Foo.class Bar.class </span><br><span class="line">示例 2: 使用现有的清单文件 &#x27;mymanifest&#x27; 并</span><br><span class="line">           将 foo/ 目录中的所有文件归档到 &#x27;classes.jar&#x27; 中: </span><br><span class="line">       jar cvfm classes.jar mymanifest -C foo/ .</span><br></pre></td></tr></table></figure>

<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul>
<li>查看文件在jar包中的路径</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[security@localhost jars]$ jar tvf service.jar |grep todo</span><br><span class="line">  304 Fri Aug 23 12:00:00 CST 2019 BOOT-INF/classes/templates/todo.ftl</span><br></pre></td></tr></table></figure>

<ul>
<li>解压出文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[security@localhost jars]$ jar xvf service.jar BOOT-INF/classes/templates/todo.ftl</span><br><span class="line">  已解压: BOOT-INF/classes/templates/todo.ftl</span><br></pre></td></tr></table></figure>

<ul>
<li>覆盖解压出的文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv todo.ftl BOOT-INF/classes/templates/todo.ftl</span><br></pre></td></tr></table></figure>

<ul>
<li>合并文件到jar包中</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[security@localhost jars]$ jar uvf service.jar BOOT-INF/classes/templates/todo.ftl</span><br><span class="line">  正在添加: BOOT-INF/classes/templates/todo.ftl(输入 = 304) (输出 = 195)(压缩了 35%)</span><br></pre></td></tr></table></figure>

<ul>
<li>删除解压出的文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[security@localhost jars]$ rm -rf BOOT-INF</span><br></pre></td></tr></table></figure>

<ul>
<li>重启服务</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>安装WireGuard</title>
    <url>/2021/07/20/%E5%AE%89%E8%A3%85WireGuard/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装windows端"><a href="#安装windows端" class="headerlink" title="安装windows端"></a>安装windows端</h2><p>安装wireguard-amd64-0.3.16.msi：可以正常安装，无法正常使用<br>安装TunSafe-1.4.exe：可以正常安装，可以正常使用，可以支持ListenPortTCP</p>
<h2 id="安装centos端"><a href="#安装centos端" class="headerlink" title="安装centos端"></a>安装centos端</h2><blockquote>
<p>需要升级内核</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install epel-release elrepo-release</span><br><span class="line">yum install yum-plugin-elrepo</span><br><span class="line">yum install kmod-wireguard wireguard-tools</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">reboot</span><br><span class="line"><span class="meta">#</span><span class="bash"> 加载内核模块</span></span><br><span class="line">modprobe wireguard</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查WG模块加载是否正常</span></span><br><span class="line">lsmod | grep wireguard</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="安装wireguard-go端"><a href="#安装wireguard-go端" class="headerlink" title="安装wireguard-go端"></a>安装wireguard-go端</h2><blockquote>
<p>无需升级内核，多平台，性能差</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/go/src/github.com</span><br><span class="line">cd ~/go/src/github.com</span><br><span class="line">git clone https://github.com/WireGuard/wireguard-go.git</span><br><span class="line">cd wireguard-go</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">yum install wireguard-tools</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> WG_QUICK_USERSPACE_IMPLEMENTATION=wireguard-go</span></span><br><span class="line">wg-quick up wg0</span><br></pre></td></tr></table></figure>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="配置服务端"><a href="#配置服务端" class="headerlink" title="配置服务端"></a>配置服务端</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> wg genkey &gt; privatekey</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> wg pubkey &lt; privatekey &gt; publickey</span></span><br><span class="line">wg genkey | tee privatekey | wg pubkey &gt; publickey</span><br><span class="line">vi /etc/wireguard/wg0.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">[Interface]</span><br><span class="line">Address = 10.0.0.1/24</span><br><span class="line">ListenPort = 51820</span><br><span class="line">PrivateKey = &lt;Server Private Key&gt;</span><br><span class="line">PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">systemctl enable wg-quick@wg0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动服务端</span></span><br><span class="line">wg-quick up wg0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止服务端</span></span><br><span class="line">wg-quick down wg0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看节点列表</span></span><br><span class="line">wg show</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重载配置文件，不影响已有连接</span></span><br><span class="line">wg syncconf wg0 &lt;(wg-quick strip wg0)</span><br></pre></td></tr></table></figure>

<h2 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wg genkey | tee privatekey | wg pubkey &gt; publickey</span><br><span class="line">vi /etc/wireguard/wg0.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">[Interface]</span><br><span class="line">Address = 10.0.0.2/24</span><br><span class="line">ListenPort = 51820</span><br><span class="line">PrivateKey = &lt;Client Private Key&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br></pre></td></tr></table></figure>

<h2 id="连接-Client-和-Server"><a href="#连接-Client-和-Server" class="headerlink" title="连接 Client 和 Server"></a>连接 Client 和 Server</h2><h3 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a>使用配置文件</h3><p>服务端wg0.conf添加到客户端Peer</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = &lt;Client Public key&gt;</span><br><span class="line">AllowedIPs = 10.0.0.2/32</span><br><span class="line">PersistentKeepalive = 30</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br></pre></td></tr></table></figure>

<p>客户端wg0.conf添加到服务端Peer</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = &lt;Server Public Key&gt;</span><br><span class="line">AllowedIPs = 10.0.0.0/24</span><br><span class="line">Endpoint = &lt;Server Public IP&gt;:51820</span><br><span class="line">PersistentKeepalive = 30</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br></pre></td></tr></table></figure>

<h3 id="使用命令行"><a href="#使用命令行" class="headerlink" title="使用命令行"></a>使用命令行</h3><p>服务端执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wg set wg0 peer &lt;Client Public key&gt; allowed-ips 10.0.0.2/32 persistent-keepalive 30</span><br><span class="line">wg-quick save wg0</span><br></pre></td></tr></table></figure>

<p>客户端执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wg set wg0 peer &lt;Server Public Key&gt; allowed-ips 10.0.0.0/24 persistent-keepalive 30 endpoint &lt;Server Public IP&gt;:51820 </span><br><span class="line">wg-quick save wg0</span><br></pre></td></tr></table></figure>

<h2 id="配置生成"><a href="#配置生成" class="headerlink" title="配置生成"></a>配置生成</h2><p><a href="https://www.wireguardconfig.com/">https://www.wireguardconfig.com</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.wireguard.com/">https://www.wireguard.com</a></p>
<p><a href="https://fuckcloudnative.io/posts/wireguard-docs-practice">https://fuckcloudnative.io/posts/wireguard-docs-practice</a></p>
]]></content>
      <categories>
        <category>Proxy</category>
      </categories>
      <tags>
        <tag>Proxy</tag>
        <tag>WireGuard</tag>
        <tag>VPN</tag>
      </tags>
  </entry>
  <entry>
    <title>安装badvpn</title>
    <url>/2021/07/22/%E5%AE%89%E8%A3%85badvpn/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install cmake openssl openssl-devel nspr nspr-devel nss nss-devel</span><br><span class="line">ln -s /usr/include/nss3 /usr/include/nss</span><br><span class="line">git clone https://github.com/ambrop72/badvpn.git</span><br><span class="line">cd badvpn</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake .. -DCMAKE_INSTALL_PREFIX=/usr</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>一般情况，服务端只需启动socks5服务即可；如果需要转发UDP，服务端还需要启动udpgw服务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">badvpn-udpgw --listen-addr 127.0.0.1:7300</span><br></pre></td></tr></table></figure>

<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip tuntap del dev tun0 mode tun</span><br><span class="line">ip tuntap add dev tun0 mode tun</span><br><span class="line">ip addr add 10.0.0.1/24 dev tun0</span><br><span class="line">ip link set tun0 up</span><br><span class="line">badvpn-tun2socks --tundev tun0 --netif-ipaddr 10.0.0.2 --netif-netmask 255.255.255.0 \</span><br><span class="line">--socks-server-addr 12.34.56.78:1080 --username &lt;username&gt; --password &lt;password&gt; \</span><br><span class="line">--udpgw-remote-server-addr 127.0.0.1:7300</span><br></pre></td></tr></table></figure>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="测试TCP"><a href="#测试TCP" class="headerlink" title="测试TCP"></a>测试TCP</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip route add 192.168.1.0/24 via 10.0.0.1</span><br><span class="line">curl http://192.168.1.1</span><br></pre></td></tr></table></figure>

<h2 id="测试UDP"><a href="#测试UDP" class="headerlink" title="测试UDP"></a>测试UDP</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip route add 8.8.8.8/32 via 10.0.0.1</span><br><span class="line">nslookup baidu.com 8.8.8.8</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/yangchuansheng/love-gfw/blob/master/docs/badvpn-linux.md">https://github.com/yangchuansheng/love-gfw/blob/master/docs/badvpn-linux.md</a></p>
]]></content>
      <categories>
        <category>Proxy</category>
      </categories>
      <tags>
        <tag>Proxy</tag>
        <tag>badvpn</tag>
      </tags>
  </entry>
  <entry>
    <title>安装dashboard</title>
    <url>/2021/08/14/%E5%AE%89%E8%A3%85dashboard/</url>
    <content><![CDATA[<h1 id="yaml安装"><a href="#yaml安装" class="headerlink" title="yaml安装"></a>yaml安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.2.0/aio/deploy/recommended.yaml -O dashboard.yaml</span></span><br><span class="line">wget https://ghproxy.com/https://raw.githubusercontent.com/kubernetes/dashboard/v2.2.0/aio/deploy/recommended.yaml \</span><br><span class="line">-O dashboard.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 修改 namespace</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 启用 NodePort</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 修改 ClusterRoleBinding 中 ClusterRole 为 cluster-admin</span></span></span><br><span class="line">vi dashboard.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交</span></span><br><span class="line">kubectl apply -f dashboard.yaml</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="helm安装"><a href="#helm安装" class="headerlink" title="helm安装"></a>helm安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard</span><br><span class="line">helm pull kubernetes-dashboard/kubernetes-dashboard --version 4.2.0</span><br><span class="line">tar zxvf kubernetes-dashboard-4.2.0.tgz </span><br><span class="line">cd kubernetes-dashboard</span><br><span class="line">cp values.yaml values-override.yaml</span><br><span class="line">vi values-override.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">extraArgs:</span><br><span class="line">  - --token-ttl=0</span><br><span class="line">service:</span><br><span class="line">  type: NodePort</span><br><span class="line">  nodePort: 30000</span><br><span class="line">metricsScraper:</span><br><span class="line">  enabled: true</span><br><span class="line">metrics-server:</span><br><span class="line">  enabled: true</span><br><span class="line">  args:</span><br><span class="line">    - --kubelet-preferred-address-types=InternalIP</span><br><span class="line">    - --kubelet-insecure-tls</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">helm install --create-namespace --namespace cmp-dashboard dashboard -f values-override.yaml .</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取 token</span></span><br><span class="line">kubectl -n cmp-dashboard get secrets \</span><br><span class="line"><span class="meta">$</span><span class="bash">(kubectl -n cmp-dashboard get secrets | grep kubernetes-dashboard-token | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>) \</span></span><br><span class="line"><span class="bash">-o jsonpath=<span class="string">&quot;&#123;[&#x27;data&#x27;][&#x27;token&#x27;]&#125;&quot;</span> | base64 --decode &amp;&amp; <span class="built_in">echo</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提升权限</span></span><br><span class="line">vi dashboard-rbac.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: dashboard-kubernetes-dashboard</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">	name: dashboard-kubernetes-dashboard</span><br><span class="line">namespace: cmp-dashboard</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">kubectl apply -f dashboard-rbac.yaml</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取 token</span></span><br><span class="line">kubectl -n cmp-dashboard get secrets \</span><br><span class="line"><span class="meta">$</span><span class="bash">(kubectl -n cmp-dashboard get secrets | grep kubernetes-dashboard-token | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>) \</span></span><br><span class="line"><span class="bash">-o go-template=<span class="string">&quot;&#123;&#123;.data.token | base64decode&#125;&#125;&quot;</span> &amp;&amp; <span class="built_in">echo</span></span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
        <tag>harbor</tag>
      </tags>
  </entry>
  <entry>
    <title>安装etcd</title>
    <url>/2021/07/27/%E5%AE%89%E8%A3%85etcd/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h2><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 配置 etcd 使用主机IP 地址</span></span><br><span class="line">export NODE1=172.17.0.1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置一个 Docker 卷来存储 etcd 数据</span></span><br><span class="line">docker volume create --name etcd-data</span><br><span class="line">export DATA_DIR=etcd-data</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置 REGISTRY</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> REGISTRY=quay.io/coreos/etcd</span></span><br><span class="line">export REGISTRY=quay.mirrors.ustc.edu.cn/coreos/etcd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置 TAG</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> TAG=latest</span></span><br><span class="line">export TAG=v3.4.16</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">docker run \</span><br><span class="line">-p 2379:2379 \</span><br><span class="line">-p 2380:2380 \</span><br><span class="line">--volume=$&#123;DATA_DIR&#125;:/etcd-data \</span><br><span class="line">--name etcd $&#123;REGISTRY&#125;:$&#123;TAG&#125; \</span><br><span class="line">/usr/local/bin/etcd \</span><br><span class="line">--data-dir=/etcd-data --name node1 \</span><br><span class="line">--initial-advertise-peer-urls http://$&#123;NODE1&#125;:2380 --listen-peer-urls http://0.0.0.0:2380 \</span><br><span class="line">--advertise-client-urls http://$&#123;NODE1&#125;:2379 --listen-client-urls http://0.0.0.0:2379 \</span><br><span class="line">--initial-cluster node1=http://$&#123;NODE1&#125;:2380</span><br></pre></td></tr></table></figure>

<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1>]]></content>
      <categories>
        <category>etcd</category>
      </categories>
      <tags>
        <tag>etcd</tag>
      </tags>
  </entry>
  <entry>
    <title>安装harbor</title>
    <url>/2021/08/14/%E5%AE%89%E8%A3%85harbor/</url>
    <content><![CDATA[<h1 id="添加仓库"><a href="#添加仓库" class="headerlink" title="添加仓库"></a>添加仓库</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm repo add harbor https://helm.goharbor.io</span><br></pre></td></tr></table></figure>

<h1 id="下载指定版本，修改配置"><a href="#下载指定版本，修改配置" class="headerlink" title="下载指定版本，修改配置"></a>下载指定版本，修改配置</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找版本</span></span><br><span class="line">helm search repo harbor/harbor --versions</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载指定版本</span></span><br><span class="line">helm fetch harbor/harbor --version 1.6.2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置</span></span><br><span class="line">tar zxvf harbor-1.6.2.tgz</span><br><span class="line">cd harbor</span><br><span class="line">cp values.yaml values-override.yaml</span><br><span class="line">vi values-override.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">expose:</span><br><span class="line">  type: nodePort</span><br><span class="line">  tls:</span><br><span class="line">    auto:</span><br><span class="line">      commonName: &quot;goharbor.io&quot;</span><br><span class="line">  nodePort:</span><br><span class="line">    ports:</span><br><span class="line">      http:</span><br><span class="line">        nodePort: 30003</span><br><span class="line">      https:</span><br><span class="line">        nodePort: 30002</span><br><span class="line">externalURL: https://192.168.3.201:30002</span><br><span class="line">trivy:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 第一种方法：填写 GitHub Token，自动下载 Trivy DB</span></span><br><span class="line">  gitHubToken: &quot;xxx&quot;</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 第二种方法：跳过更新，手动下载 Trivy DB 到 /home/scanner/.cache/trivy/db/trivy.db</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> skipUpdate: <span class="literal">true</span></span></span><br><span class="line">notary:</span><br><span class="line">  enabled: false</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">helm install --create-namespace --namespace cmp-harbor harbor -f values-override.yaml .</span><br><span class="line"><span class="meta">#</span><span class="bash"> 升级</span></span><br><span class="line">helm -n cmp-harbor upgrade harbor -f values-override.yaml .</span><br></pre></td></tr></table></figure>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 配置docker，允许自签名证书</span></span><br><span class="line">vi /etc/docker/daemon.json </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;insecure-registries&quot;: [&quot;https://192.168.3.201:30002&quot;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录</span></span><br><span class="line">docker login -u admin -p Harbor12345 192.168.3.201:30002</span><br><span class="line">cat ~/.docker/config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 推送镜像</span></span><br><span class="line">docker push 192.168.3.201:30002/library/nginx:1.20-alpine</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
        <tag>harbor</tag>
      </tags>
  </entry>
  <entry>
    <title>安装mitmproxy</title>
    <url>/2021/07/24/%E5%AE%89%E8%A3%85mitmproxy/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><h2 id="三个工具的用途"><a href="#三个工具的用途" class="headerlink" title="三个工具的用途"></a>三个工具的用途</h2><p>mitmproxy：为您提供交互式命令行界面<br>mitmweb：为您提供基于浏览器的 GUI<br>mitmdump：为您提供非交互式终端输出</p>
<span id="more"></span>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Windows-安装"><a href="#Windows-安装" class="headerlink" title="Windows 安装"></a>Windows 安装</h2><p><strong>使用zip文件</strong></p>
<p>下载：<a href="https://snapshots.mitmproxy.org/7.0.0/mitmproxy-7.0.0-windows.zip">https://snapshots.mitmproxy.org/7.0.0/mitmproxy-7.0.0-windows.zip</a><br>解压：mitmproxy-7.0.0-windows.zip</p>
<p><strong>使用installer文件</strong></p>
<p>下载：<a href="https://snapshots.mitmproxy.org/7.0.0/mitmproxy-7.0.0-windows-installer.exe">https://snapshots.mitmproxy.org/7.0.0/mitmproxy-7.0.0-windows-installer.exe</a><br>安装：mitmproxy-7.0.0-windows-installer.exe</p>
<h2 id="Linux-安装"><a href="#Linux-安装" class="headerlink" title="Linux 安装"></a>Linux 安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://snapshots.mitmproxy.org/7.0.0/mitmproxy-7.0.0-linux.tar.gz</span><br><span class="line">mkdir mitmproxy-7.0.0-linux</span><br><span class="line">tar -zxvf mitmproxy-7.0.0-linux.tar.gz -C mitmproxy-7.0.0-linux</span><br><span class="line">cd mitmproxy-7.0.0-linux</span><br><span class="line">./mitmproxy --version</span><br></pre></td></tr></table></figure>

<h1 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h1><h2 id="下载证书"><a href="#下载证书" class="headerlink" title="下载证书"></a>下载证书</h2><p>方法一：可以通过浏览器打开 <a href="http://mitm.it/">http://mitm.it</a> 下载证书，要求浏览器已经配置proxy<br>方法二：首次启动 mitmproxy 之后，证书会自动生成到 ~/.mitmproxy 目录，可以到 ~/.mitmproxy 目录中下载</p>
<h2 id="安装证书到-Windows"><a href="#安装证书到-Windows" class="headerlink" title="安装证书到 Windows"></a>安装证书到 Windows</h2><p>选择【受信任的根证书颁发机构】</p>
<h2 id="安装证书到-Linux"><a href="#安装证书到-Linux" class="headerlink" title="安装证书到 Linux"></a>安装证书到 Linux</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp mitmproxy-ca-cert.pem /etc/pki/ca-trust/source/anchors</span><br><span class="line">update-ca-trust</span><br><span class="line">curl --proxy 192.168.128.1:8080 https://www.baidu.com</span><br></pre></td></tr></table></figure>

<h2 id="不安装证书，需要手动指定证书"><a href="#不安装证书，需要手动指定证书" class="headerlink" title="不安装证书，需要手动指定证书"></a>不安装证书，需要手动指定证书</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --proxy 192.168.128.1:8080 --cacert mitmproxy-ca-cert.pem https://www.baidu.com</span><br></pre></td></tr></table></figure>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="使用-mitmproxy"><a href="#使用-mitmproxy" class="headerlink" title="使用 mitmproxy"></a>使用 mitmproxy</h2><p>参考：<a href="https://docs.mitmproxy.org/stable/mitmproxytutorial-userinterface">https://docs.mitmproxy.org/stable/mitmproxytutorial-userinterface</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一个窗口，启动mitmproxy</span></span><br><span class="line">./mitmproxy</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第一个窗口，指定监听端口，启动mitmproxy</span></span><br><span class="line">./mitmproxy -p 8888</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二个窗口，请求url之后，第一个窗口可以看到数据</span></span><br><span class="line">curl --proxy http://127.0.0.1:8080 http://wttr.in/Dunedin?0</span><br><span class="line">curl --proxy http://127.0.0.1:8080 http://wttr.in/Innsbruck?0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第一个窗口，支持快捷键和命令行操作</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 使用箭头键 ↑ 和 ↓ 更改焦点 (&gt;&gt;)</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 按 ENTER 查看详细信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 按 q 退出当前视图</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 按 ？获取所有可用键盘快捷键的列表</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 按 : 打开底部的命令提示符</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 输入 :console.view.flow @focus 等同于按 ENTER 键</span></span></span><br></pre></td></tr></table></figure>

<h2 id="使用-mitmweb"><a href="#使用-mitmweb" class="headerlink" title="使用 mitmweb"></a>使用 mitmweb</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动之后，自动打开浏览器 http://127.0.0.1:8081</span> </span><br><span class="line">./mitmweb</span><br></pre></td></tr></table></figure>

<h2 id="使用-mitmdump"><a href="#使用-mitmdump" class="headerlink" title="使用 mitmdump"></a>使用 mitmdump</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./mitmdump -s script.py</span><br></pre></td></tr></table></figure>

<h2 id="使用-addons：AddHeader"><a href="#使用-addons：AddHeader" class="headerlink" title="使用 addons：AddHeader"></a>使用 addons：AddHeader</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi AddHeader.py</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">class AddHeader:</span><br><span class="line">    def response(self, flow):</span><br><span class="line">        flow.response.headers[&quot;name&quot;] = str(&#x27;mitmproxy&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addons = [</span><br><span class="line">    AddHeader()</span><br><span class="line">]</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">./mitmdump -s AddHeader.py</span><br></pre></td></tr></table></figure>

<h2 id="使用-addons：ModifyResponse"><a href="#使用-addons：ModifyResponse" class="headerlink" title="使用 addons：ModifyResponse"></a>使用 addons：ModifyResponse</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi ModifyResponse.py</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">from mitmproxy import ctx</span><br><span class="line">from mitmproxy import http</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ModifyResponse:</span><br><span class="line">    def response(self, flow: http.HTTPFlow) -&gt; None:</span><br><span class="line">        if flow.request.url == &#x27;https://www.baidu.com/&#x27;:</span><br><span class="line">            flow.response.content = flow.response.content.decode(&#x27;utf8&#x27;).replace(</span><br><span class="line">                &#x27;&lt;title&gt;百度一下，你就知道&lt;/title&gt;&#x27;, &#x27;&lt;title&gt;mitmproxy&lt;/title&gt;&#x27;</span><br><span class="line">            ).encode(&#x27;utf8&#x27;)</span><br><span class="line">            ctx.log.info(&quot;修改title为mitmproxy&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addons = [</span><br><span class="line">    ModifyResponse()</span><br><span class="line">]</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">./mitmdump -s ModifyResponse.py</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mitmproxy</category>
      </categories>
      <tags>
        <tag>Proxy</tag>
        <tag>mitmproxy</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>安装redsocks</title>
    <url>/2021/07/21/%E5%AE%89%E8%A3%85redsocks/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install libevent-devel git gcc</span><br><span class="line">git clone https://github.com/darkk/redsocks</span><br><span class="line">cd redsocks</span><br><span class="line">make</span><br><span class="line">cp redsocks /usr/bin</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="配置redsocks"><a href="#配置redsocks" class="headerlink" title="配置redsocks"></a>配置redsocks</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /etc/redsocks</span><br><span class="line">cp redsocks.conf.example /etc/redsocks/redsocks.conf</span><br><span class="line">cd /etc/redsocks</span><br><span class="line">vi redsocks.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">base &#123;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ...</span></span><br><span class="line">daemon = on;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ...</span></span><br><span class="line">&#125;</span><br><span class="line">redsocks &#123;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ...</span></span><br><span class="line">ip = 127.0.0.1;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br></pre></td></tr></table></figure>

<h2 id="配置iptables"><a href="#配置iptables" class="headerlink" title="配置iptables"></a>配置iptables</h2><p>仅192.168.0.0/24走代理</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 新建链</span></span><br><span class="line">iptables -t nat -N REDSOCKS</span><br><span class="line"><span class="meta">#</span><span class="bash"> 应用REDSOCKS</span></span><br><span class="line">iptables -t nat -A OUTPUT -p tcp -j REDSOCKS</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp -j REDSOCKS</span><br><span class="line"><span class="meta">#</span><span class="bash"> 仅192.168.0.0/24走代理</span></span><br><span class="line">iptables -t nat -A REDSOCKS -p tcp -d 192.168.0.0/24 -j REDIRECT --to-ports 12345</span><br><span class="line">iptables -t nat -A REDSOCKS -p tcp -j RETURN</span><br></pre></td></tr></table></figure>

<p>仅192.168.0.0/24不走代理</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 新建链</span></span><br><span class="line">iptables -t nat -N REDSOCKS</span><br><span class="line"><span class="meta">#</span><span class="bash"> 应用REDSOCKS</span></span><br><span class="line">iptables -t nat -A OUTPUT -p tcp -j REDSOCKS</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp -j REDSOCKS</span><br><span class="line"><span class="meta">#</span><span class="bash"> 仅192.168.0.0/24不走代理</span></span><br><span class="line">iptables -t nat -A REDSOCKS -d 192.168.0.0/24 -j RETURN</span><br><span class="line">iptables -t nat -A REDSOCKS -p tcp -j REDIRECT --to-ports 12345</span><br></pre></td></tr></table></figure>

<p>指定用户建立的连接走代理</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A OUTPUT -p tcp -m owner --uid-owner luser -j REDSOCKS</span><br><span class="line">firefox</span><br></pre></td></tr></table></figure>

<p>指定组建立的连接走代理</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd socksified</span><br><span class="line">usermod --append --groups socksified luser</span><br><span class="line">iptables -t nat -A OUTPUT -p tcp -m owner --gid-owner socksified -j REDSOCKS</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以特定的组执行命令，结合上面命令使用</span></span><br><span class="line">id</span><br><span class="line">uid=1000(luser) gid=1000(luser) groups=1000(luser),1001(socksified)</span><br><span class="line">sg socksified -c id</span><br><span class="line">uid=1000(luser) gid=1001(socksified) groups=1000(luser),1001(socksified)</span><br><span class="line">sg socksified -c firefox</span><br></pre></td></tr></table></figure>

<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><h2 id="手动启动"><a href="#手动启动" class="headerlink" title="手动启动"></a>手动启动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redsocks -v</span><br><span class="line">redsocks -c /etc/redsocks/redsocks.conf</span><br></pre></td></tr></table></figure>

<h2 id="自动启动"><a href="#自动启动" class="headerlink" title="自动启动"></a>自动启动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /lib/systemd/system/redsocks.service</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">[Unit]</span><br><span class="line">Description=redsocks</span><br><span class="line">After=network-online.target</span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">Restart=always</span><br><span class="line">ExecStart=/usr/bin/redsocks -c /etc/redsocks/redsocks.conf</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">systemctl enable redsocks &amp;&amp; systemctl start redsocks &amp;&amp; systemctl status redsocks</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Proxy</category>
      </categories>
      <tags>
        <tag>Proxy</tag>
        <tag>redsocks</tag>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Termux</title>
    <url>/2021/07/25/%E5%AE%89%E8%A3%85Termux/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>方法1：打开 <a href="https://f-droid.org/packages/com.termux">https://f-droid.org/packages/com.termux</a> ，下载 APK 安装，推荐</p>
<p>方法2：打开 google play store 搜索 termux ，直接安装</p>
<span id="more"></span>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="修改-apt-软件源"><a href="#修改-apt-软件源" class="headerlink" title="修改 apt 软件源"></a>修改 apt 软件源</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s@^\(deb.*stable main\)$@#\1\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/termux-packages-24 stable main@&#x27; \</span><br><span class="line"><span class="meta">$</span><span class="bash">PREFIX/etc/apt/sources.list</span></span><br><span class="line">sed -i &#x27;s@^\(deb.*games stable\)$@#\1\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/game-packages-24 games stable@&#x27; \</span><br><span class="line"><span class="meta">$</span><span class="bash">PREFIX/etc/apt/sources.list.d/game.list</span></span><br><span class="line">sed -i &#x27;s@^\(deb.*science stable\)$@#\1\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/science-packages-24 science stable@&#x27; \</span><br><span class="line"><span class="meta">$</span><span class="bash">PREFIX/etc/apt/sources.list.d/science.list</span></span><br><span class="line">pkg update</span><br></pre></td></tr></table></figure>

<h2 id="访问手机存储"><a href="#访问手机存储" class="headerlink" title="访问手机存储"></a>访问手机存储</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取权限，会在 home 下生成 storage 目录</span></span><br><span class="line">termux-setup-storage</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 storage 目录结构</span></span><br><span class="line">tree storage</span><br><span class="line">storage</span><br><span class="line">├── dcim -&gt; /storage/emulated/0/DCIM</span><br><span class="line">├── downloads -&gt; /storage/emulated/0/Download</span><br><span class="line">├── movies -&gt; /storage/emulated/0/Movies</span><br><span class="line">├── music -&gt; /storage/emulated/0/Music</span><br><span class="line">├── pictures -&gt; /storage/emulated/0/Pictures</span><br><span class="line">└── shared -&gt; /storage/emulated/0</span><br><span class="line"></span><br><span class="line">6 directories, 0 files</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="安装-SSH-服务"><a href="#安装-SSH-服务" class="headerlink" title="安装 SSH 服务"></a>安装 SSH 服务</h2><p><strong>安装 OPENSSH</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pkg install openssh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动sshd</span></span><br><span class="line">sshd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止sshd</span></span><br><span class="line">pkill sshd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改密码</span></span><br><span class="line">passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取用户</span></span><br><span class="line">id</span><br><span class="line">uid=10300(u0_a300) gid=10300(u0_a300) groups=10300(u0_a300),3003(inet),9997(everybody),20300(u0_a300_cache),50300(all_a300)</span><br></pre></td></tr></table></figure>

<p><strong>配置远程登录</strong></p>
<p>方法1：通过密码登录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看 termux 配置，默认 PasswordAuthentication yes</span></span><br><span class="line">cat $PREFIX/etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>方法2：在客户端生成秘钥对</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成密钥对，复制 id_rsa.pub 内容到 termux：data\data\com.termux\files\home\.ssh\authorized_keys</span></span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>

<p>方法3：在 termux 生成秘钥对</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成密钥对，复制 id_rsa 到客户端</span></span><br><span class="line">ssh-keygen</span><br><span class="line">cd .ssh</span><br><span class="line">cat id_rsa.pub &gt; authorized_keys</span><br></pre></td></tr></table></figure>

<p>方法4：直接使用 openssh 安装的时候生成的密钥对</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 复制 ssh_host_rsa_key.pub 到 authorized_keys</span></span><br><span class="line">cat ../usr/etc/ssh/ssh_host_rsa_key.pub &gt; .ssh/authorized_keys</span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制 ssh_host_rsa_key 到 客户端</span></span><br><span class="line">cat ../usr/etc/ssh/ssh_host_rsa_key</span><br></pre></td></tr></table></figure>

<p><strong>客户端登录</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 密码登录</span></span><br><span class="line">ssh u0_a300@192.168.137.2 -p 8022</span><br><span class="line"><span class="meta">#</span><span class="bash"> 密钥登录</span></span><br><span class="line">ssh -i ~/.ssh/id_rsa 192.168.137.2 -p 8022</span><br></pre></td></tr></table></figure>

<h2 id="查看监听端口"><a href="#查看监听端口" class="headerlink" title="查看监听端口"></a>查看监听端口</h2><p>Andorid 10 版本以后的 Termux 无法正常使用 netstat -an 命令，可以通过 nmap 命令查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装nmap</span></span><br><span class="line">pkg install nmap</span><br><span class="line"><span class="meta">#</span><span class="bash"> 扫描端口</span></span><br><span class="line">nmap 127.0.0.1</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.sqlsec.com/2018/05/termux.html">https://www.sqlsec.com/2018/05/termux.html</a></p>
<p><a href="https://github.com/termux/termux-app">https://github.com/termux/termux-app</a></p>
]]></content>
      <categories>
        <category>Termux</category>
      </categories>
      <tags>
        <tag>Termux</tag>
        <tag>手机</tag>
      </tags>
  </entry>
  <entry>
    <title>安装rook-ceph</title>
    <url>/2021/08/14/%E5%AE%89%E8%A3%85rook-ceph/</url>
    <content><![CDATA[<h1 id="添加仓库"><a href="#添加仓库" class="headerlink" title="添加仓库"></a>添加仓库</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm repo add rook https://charts.rook.io/release</span><br></pre></td></tr></table></figure>

<h1 id="下载指定版本，修改配置"><a href="#下载指定版本，修改配置" class="headerlink" title="下载指定版本，修改配置"></a>下载指定版本，修改配置</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rook-ceph</span></span><br><span class="line">helm fetch rook/rook-ceph --version 1.7.0</span><br><span class="line">tar zxvf rook-ceph-v1.7.0.tgz</span><br><span class="line">cd rook-ceph</span><br><span class="line">cp values.yaml values-override.yaml</span><br><span class="line">vi values-override.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"> rook-ceph-cluster</span></span><br><span class="line">helm fetch rook/rook-ceph-cluster --version 1.7.0</span><br><span class="line">tar zxvf rook-ceph-cluster-v1.7.0.tgz</span><br><span class="line">cd rook-ceph-cluster</span><br><span class="line">cp values.yaml values-override.yaml</span><br><span class="line">vi values-override.yaml</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rook-ceph</span></span><br><span class="line">cd rook-ceph</span><br><span class="line">helm install --create-namespace --namespace rook-ceph rook-ceph -f values-override.yaml .</span><br><span class="line"><span class="meta">#</span><span class="bash"> rook-ceph-cluster</span></span><br><span class="line">cd rook-ceph-cluster</span><br><span class="line">helm install --create-namespace --namespace rook-ceph rook-ceph-cluster -f values-override.yaml .</span><br></pre></td></tr></table></figure>

<h1 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h1><h2 id="通过-toolbox-维护"><a href="#通过-toolbox-维护" class="headerlink" title="通过 toolbox 维护"></a>通过 toolbox 维护</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl -n rook-ceph exec -it \</span><br><span class="line"><span class="meta">$</span><span class="bash">(kubectl -n rook-ceph get pod -l <span class="string">&quot;app=rook-ceph-tools&quot;</span> -o jsonpath=<span class="string">&#x27;&#123;.items[0].metadata.name&#125;&#x27;</span>) \</span></span><br><span class="line"><span class="bash">-- bash</span></span><br><span class="line">ceph status</span><br><span class="line">ceph df</span><br><span class="line">ceph osd status</span><br><span class="line">ceph osd df</span><br><span class="line">ceph osd tree</span><br><span class="line">ceph osd lspools</span><br></pre></td></tr></table></figure>

<h2 id="通过-dashboard-维护"><a href="#通过-dashboard-维护" class="headerlink" title="通过 dashboard 维护"></a>通过 dashboard 维护</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加nodeport</span></span><br><span class="line">kubectl -n rook-ceph get svc rook-ceph-mgr-dashboard -o yaml &gt; rook-ceph-mgr-dashboard-nodeport.yaml</span><br><span class="line">vi rook-ceph-mgr-dashboard-nodeport.yaml</span><br><span class="line">kubectl apply -f rook-ceph-mgr-dashboard-nodeport.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取密码，账号：admin</span></span><br><span class="line">kubectl -n rook-ceph get secret rook-ceph-dashboard-password -o jsonpath=&quot;&#123;[&#x27;data&#x27;][&#x27;password&#x27;]&#125;&quot; | base64 --decode &amp;&amp; echo</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
        <tag>ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>安装sshuttle</title>
    <url>/2021/07/21/%E5%AE%89%E8%A3%85sshuttle/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>支持TCP、UDP，不支持ICMP</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export &#123;http,https,ftp&#125;_proxy=&quot;http://127.0.0.1:1081&quot;</span><br><span class="line">yum install python3 python3-devel gcc</span><br></pre></td></tr></table></figure>

<h2 id="主机环境安装"><a href="#主机环境安装" class="headerlink" title="主机环境安装"></a>主机环境安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install sshuttle</span><br></pre></td></tr></table></figure>

<h2 id="虚拟环境安装"><a href="#虚拟环境安装" class="headerlink" title="虚拟环境安装"></a>虚拟环境安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install virtualenv</span><br><span class="line">virtualenv -p python3 /tmp/sshuttle</span><br><span class="line">source /tmp/sshuttle/bin/activate</span><br><span class="line">python -V &amp;&amp; pip -V</span><br><span class="line">pip install sshuttle</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="代理TCP"><a href="#代理TCP" class="headerlink" title="代理TCP"></a>代理TCP</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sshuttle -r root@127.0.0.1:60022 0.0.0.0/0 -x 192.168.128.0/24 -v</span><br></pre></td></tr></table></figure>

<h2 id="代理TCP和DNS"><a href="#代理TCP和DNS" class="headerlink" title="代理TCP和DNS"></a>代理TCP和DNS</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sshuttle -r root@127.0.0.1:60022 0.0.0.0/0 -x 192.168.128.0/24 --dns -v</span><br></pre></td></tr></table></figure>

<h2 id="代理TCP和UDP"><a href="#代理TCP和UDP" class="headerlink" title="代理TCP和UDP"></a>代理TCP和UDP</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sshuttle -r root@127.0.0.1:60022 0.0.0.0/0 -x 192.168.128.0/24 --method tproxy -v</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加路由</span></span><br><span class="line">ip route add local default dev lo table 100</span><br><span class="line">ip rule add fwmark 1 lookup 100</span><br><span class="line">ip -6 route add local default dev lo table 100</span><br><span class="line">ip -6 rule add fwmark 1 lookup 100</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Proxy</category>
      </categories>
      <tags>
        <tag>Proxy</tag>
        <tag>sshuttle</tag>
      </tags>
  </entry>
  <entry>
    <title>配置Docker容器的访问策略</title>
    <url>/2021/07/21/%E9%85%8D%E7%BD%AEDocker%E5%AE%B9%E5%99%A8%E7%9A%84%E8%AE%BF%E9%97%AE%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>需要对容器暴露的主机端口进行白名单访问控制，仅允许某些IP访问主机端口。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name nginx -p 60080:80 nginx:1.20-alpine</span><br></pre></td></tr></table></figure>

<h1 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h1><p>Docker通过操作iptables规则来提供网络隔离。<br>Docker安装了两个名为DOCKER-USER和DOCKER的自定义iptables链，并确保传入的数据包始终首先由这两个链检查。<br>Docker的所有iptables规则都添加到DOCKER链中，不要手动修改此链。<br>如果需要添加自定义规则，请使用DOCKER-USER链，DOCKER-USER链在Docker链之前应用，也就是说用户自定义规则优先于Docker规则。<br>DOCKER-USER链默认只有一条规则，意思是 允许所有流量通过</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Chain DOCKER-USER (1 references)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    0     0 RETURN     all  --  *      *       0.0.0.0/0            0.0.0.0/0  </span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>不推荐直接在FORWARD链中添加规则，具体原因，分两种情况说明</p>
<ol>
<li>在FORWARD链底部添加规则<br>由于Docker自动添加的ACCEPT规则在前面，所以自定义规则无法起作用。</li>
<li>在FORWARD链顶部添加规则<br>刚添加完规则的时候是起作用的。<br>执行systemctl restart docker等操作之后，Docker会把自己的规则添加到FORWARD链顶部，导致自定义规则无法起作用。</li>
</ol>
<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>允许IP访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -I DOCKER-USER -i eth0 ! -s 192.168.1.1 -j DROP</span><br></pre></td></tr></table></figure>

<p>允许网段访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -I DOCKER-USER -i eth0 ! -s 192.168.1.0/24 -j DROP</span><br></pre></td></tr></table></figure>

<p>允许连续IP访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -I DOCKER-USER -m iprange -i eth0 ! --src-range 192.168.1.1-192.168.1.3 -j DROP</span><br></pre></td></tr></table></figure>

<p>允许多IP访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -I DOCKER-USER -i eth0 -j DROP</span><br><span class="line">iptables -I DOCKER-USER -i eth0 -p tcp -m tcp -s 192.168.1.0/24 --dport 60080 -j RETURN</span><br><span class="line">iptables -I DOCKER-USER -i eth0 -p tcp -m tcp -s 192.168.2.0/24 --dport 60080 -j RETURN</span><br><span class="line">iptables -nvL</span><br><span class="line">Chain DOCKER-USER (1 references)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    0     0 RETURN     tcp  --  eth0   *       192.168.2.0/24       0.0.0.0/0            tcp dpt:60080</span><br><span class="line">    0     0 RETURN     tcp  --  eth0   *       192.168.1.0/24       0.0.0.0/0            tcp dpt:60080</span><br><span class="line">    0     0 DROP       all  --  eth0   *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">    0     0 RETURN     all  --  *      *       0.0.0.0/0            0.0.0.0/0  </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>iptables</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
</search>
